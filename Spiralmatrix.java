import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class Spiralmatrix {
    public static List<Integer> solver(int[][] nums ) {
        List<Integer> result = new ArrayList<>();
        int startRow = 0;
        int colStart = 0;
        int endRow = nums.length-1;
        int colEnd = nums[0].length-1;

        while(startRow <= endRow && colStart <= colEnd) {
            for(int j=colStart; j<=colEnd; j++) {
               result.add(nums[startRow][j]);
           
            }
            startRow++;
            for(int i=startRow; i<=endRow; i++) {
                result.add(nums[i][colEnd]);
      
            }
            colEnd--;
            if(startRow<=endRow) {
                    
                for(int j=colEnd; j>=colStart; j--) {
                    result.add(nums[endRow][j]);
                  
                }
            }
            endRow--;
            if(colStart<=colEnd) {
                for(int i=endRow; i>=startRow; i--) {
                    result.add(nums[i][colStart]);
                
                }
            }
            colStart++;
           
        }
        return result;
    }
    public static void reverseArray(int[] target, int[] arr) {
        if(target.length > arr.length  || arr.length > target.length) {
            return;
        } 
        int[] helper = new int[10001];
        for(int i=0; i<target.length; i++) {
            helper[target[i]]++;
        }
        for(int elem : arr) {
            if(helper[elem] == 0) {
                System.out.println("False");

                return;
            }else{
                helper[elem]--;
            }
        }
        System.out.println("true");
    }
    public static int rangeSum(int[] nums, int n, int left, int right) {
        int[] result = new int[(n*(n+1)) /2];
        int index = 0;
        for(int i=0; i<n; i++) {
            int sum = 0;
            for(int j=i; j<n; j++) {
                sum += nums[j];
                result[index] = sum;
                index++;
            }
        }
        Arrays.sort(result);
        int mod = (int)1e9 + 7;
        long sum = 0;
        for(int i=left-1; i<right; i++) {
           
            sum = sum % mod + result[i];
        }
        System.out.println(sum);
        return 0;
    }
    public static int[][] generateMatrix(int n) {
        int number = n * n;
        int start = 1;
        int[][] matrix = new int[n][n];
        int colStart = 0;
        int colEnd = n-1;
        int startRow = 0;
        int endRow = n-1;
        while(start <= number) {
            for(int j=colStart; j<=colEnd; j++) {
                matrix[startRow][j] = start;
                start++;
            
             }
             startRow++;
             for(int i=startRow; i<=endRow; i++) {
                 matrix[i][colEnd] = start;
                 start++;
       
             }
             colEnd--;
             if(startRow<=endRow) {
                     
                 for(int j=colEnd; j>=colStart; j--) {
                    matrix[endRow][j] = start;
                    start++;
                   
                 }
             }
             endRow--;
             if(colStart<=colEnd) {
                 for(int i=endRow; i>=startRow; i--) {
                    matrix[i][colStart] = start;
                    start++;
                 
                 }
             }
             colStart++;
            
         }
         return matrix;
        
    }
    public static int[][] sprialMatrixIII(int rowStart, int colStart, int rows, int cols) {
        List<int[]> ans = new ArrayList<>();
        int totlaCount = rows*cols;
        int[][] direction = {{0,1},{1,0},{0,-1},{-1,0}};
        int dir = 0;
        int steps = 0;
        ans.add(new int[]{rowStart,colStart});
        while(ans.size() < totlaCount) {
            if(dir == 0 || dir == 2) {
                steps++;
            }
            for(int count = 0; count < steps; count++) {
                rowStart += direction[dir][0];
                colStart += direction[dir][1];
                if(rowStart >= 0 && rowStart < rows && colStart >= 0 && colStart < cols) {
                    ans.add(new int[]{rowStart,colStart});
                }
            }
            dir = (dir + 1) % 4;
        }
        int[][] result = new int[ans.size()][2];
        for(int i=0; i<ans.size(); i++) {
            result[i] = ans.get(i);
        }
        return result;
    }
    public static void main(String[] args) {
       /*  int nums[][] = {{1,2,3},{4,5,6},{7,8,9}};
        System.out.println(solver(nums).toString());
        */ /* 
        int[] target = {1,2,3,4};
        int[] arr = {3,4,1,1};
        reverseArray(target, arr); */
        //int[] num = {};
        //System.out.println(rangeSum(num, 1000, 1, 500500));
        /* int matrix[][] = generateMatrix(4);
        for(int i=0; i<4; i++) {
            for(int j=0; j<4; j++) {
                System.out.print(matrix[i][j]);
            }
            System.out.println();
        } */
        int rows = 5, cols = 6, rStart = 1, cStart = 4;
        int[][] matrix =  sprialMatrixIII(rStart, cStart, rows, cols);
        for(int i=0; i<matrix.length; i++) {
            System.out.print(Arrays.toString(matrix[i]));
        }
    }
}
